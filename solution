#1 
select distinct(market) from dim_customer
where customer = "Atliq Exclusive" and region = "APAC";     

#2
with unique_products_2020 as 
(select count(distinct (product_code)) as unique_products_2020
FROM fact_sales_monthly
where fiscal_year = 2020),
unique_products_2021 as 
(select count(distinct (product_code)) as unique_products_2021 
from fact_sales_monthly
where fiscal_year = 2021)

select up2020.unique_products_2020,
	   up2021.unique_products_2021,
       round(((up2021.unique_products_2021 - up2020.unique_products_2020) * 100 / up2020.unique_products_2020),2) as percentage_chg 
from unique_products_2020 up2020
cross join unique_products_2021 up2021;


#3 
select segment, count(distinct(product_code)) as product_count
from dim_product
group by segment
order by count(distinct(product_code)) desc;


#4
with f_2020 as 
(select segment,
		product_code
from dim_product 
join fact_sales_monthly using (product_code)
where fiscal_year = 2020),
f_2021 as 
(select segment,
		product_code
from dim_product 
join fact_sales_monthly using (product_code)
where fiscal_year = 2021),
f_d_2020 as 
(select segment,
		count(distinct(product_code)) as product_count_2020
from f_2020 
group by segment),
f_d_2021 as 
(select segment,
		count(distinct(product_code)) as product_count_2021
from f_2021
group by segment)

select f_d_2020.segment,
	   f_d_2020.product_count_2020,
	   f_d_2021.product_count_2021,
       (f_d_2021.product_count_2021 -  f_d_2020.product_count_2020) as difference
from f_d_2020
join f_d_2021 using (segment)
order by difference desc;


#5
select product_code,
	   product, 
       round(manufacturing_cost,2) as manufacturing_cost
from fact_manufacturing_cost
join dim_product using (product_code)		
where manufacturing_cost in
(select	max(manufacturing_cost) from fact_manufacturing_cost
union
select min(manufacturing_cost) from fact_manufacturing_cost)
order by manufacturing_cost desc;

#6
select d.customer_code,
	   customer, 
	   round((pre_invoice_discount_pct)*100,2) as average_discount_percentage
from fact_pre_invoice_deductions f
join dim_customer d using (customer_code)
where fiscal_year = 2021 and market = "India"
order by average_discount_percentage desc
limit 5;

#7
select month(date) as month,
	   year(date) as year,
       (ROUND(SUM(sold_quantity * gross_price)/1000000,2)) as gross_sales_amount
from fact_sales_monthly 
join dim_customer using (customer_code)
join fact_gross_price using (product_code)
where customer = "Atliq Exclusive"
group by month, date
order by month asc, date asc;

#8
with quarters as(
	select *,
		   case
				when month(date) in (9, 10, 11) then 'Q1'
				when month(date) in (12, 1, 2) then 'Q2'
				when month(date) in (3, 4, 5) then 'Q3'
				when month(date) in (6, 7, 8) then 'Q4'
		   end as Quarter
	from fact_sales_monthly
    where fiscal_year = 2020
)
select Quarter, sum(sold_quantity) as total_sold_quantity
from quarters
group by Quarter
order by total_sold_quantity desc;

#9
with channel_gross as(
	select 
			dim_customer.channel,
            round(sum(gross_price*sold_quantity)/1000000,2) as gross_sales_mln 
	from fact_sales_monthly
    join dim_customer using (customer_code)
    join fact_gross_price using (product_code)
    where fact_sales_monthly.fiscal_year = 2021
    group by dim_customer.channel
    order by gross_sales_mln desc
)
select 
	channel,
	gross_sales_mln,
    round((gross_sales_mln/sum(gross_sales_mln) over()*100),2) as percentage
from channel_gross;

#10 
with division_sales as(
	select 
			dp.division,
            fsm.product_code,
            dp.product,
            sum(fsm.sold_quantity) as total_sold_quantity,
            rank() over(partition by dp.division order by sum(sold_quantity) desc) as rank_order
	from fact_sales_monthly fsm
    join dim_product dp using (product_code)
    where fiscal_year = 2021
    group by dp.division, fsm.product_code, dp.product
)
select
	division_sales.product_code,
    division_sales.product,
    division_sales.division,
    division_sales.total_sold_quantity,
    division_sales.rank_order
from division_sales
where division_sales.rank_order <= 3;	
